// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	mgr "golang.org/x/sys/windows/svc/mgr"
)

// Manager is an autogenerated mock type for the manager type
type Manager struct {
	mock.Mock
}

// CreateService provides a mock function with given fields: name, exepath, c, args
func (_m *Manager) CreateService(name string, exepath string, c mgr.Config, args ...string) (*mgr.Service, error) {
	_va := make([]interface{}, len(args))
	for _i := range args {
		_va[_i] = args[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, exepath, c)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *mgr.Service
	if rf, ok := ret.Get(0).(func(string, string, mgr.Config, ...string) *mgr.Service); ok {
		r0 = rf(name, exepath, c, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgr.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, mgr.Config, ...string) error); ok {
		r1 = rf(name, exepath, c, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields:
func (_m *Manager) Disconnect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ListServices provides a mock function with given fields:
func (_m *Manager) ListServices() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenService provides a mock function with given fields: name
func (_m *Manager) OpenService(name string) (*mgr.Service, error) {
	ret := _m.Called(name)

	var r0 *mgr.Service
	if rf, ok := ret.Get(0).(func(string) *mgr.Service); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgr.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
